#!/usr/bin/env python3
'''HDF5pp_list
  List datasets (or groups of datasets) in a HDF5-file.

Usage:
  HDF5pp_list [options] [--fold ARG]... <source>

Arguments:
  <source>    HDF5-file.

Options:
  -f, --fold=ARG        Fold paths.
  -d, --max-depth=ARG   Maximum depth to display.
  -h, --help            Show help.
      --version         Show version.

(c - MIT) T.W.J. de Geus | tom@geus.me | www.geus.me | github.com/tdegeus/HDF5pp
'''

# ==================================================================================================

# temporary fix: suppress warning from h5py
import warnings
warnings.filterwarnings("ignore")

import numpy as np
import sys, os, re, h5py, docopt, HDF5pp

# ==================================================================================================

def confirm(message='Proceed [y/n]?\n'):
  r'''
Prompt user for confirmation. The function loops until the user responds with

* 'y' -> True
* 'n' -> False
  '''

  while True:

    # - prompt message, get user's response
    user = input(message)

    # - check response
    if not user                     : print('Please enter y or n.'); continue
    if user not in ['y','Y','n','N']: print('Please enter y or n.'); continue
    if user     in ['y','Y'        ]: return True
    if user     in ['n','N'        ]: return False

# ==================================================================================================

def error(message):
  r'''
Print error message and quit.
  '''

  print(message)

  sys.exit(1)

# ==================================================================================================

def quit(message):
  r'''
Prompt user for confirmation. If the response is negative this function quits the program.
  '''

  if not confirm(message):
    sys.exit(1)

# ==================================================================================================

def isfile(fname):
  r'''
Check if a fail exists, quit otherwise.
  '''

  if not os.path.isfile(fname):
    error('"{0:s}" does not exist'.format(fname))

# ==================================================================================================

# parse command-line options
# --------------------------

args = docopt.docopt(__doc__,version='0.0.2')

# check files
# -----------

# files that are required to exist
isfile(args['<source>'])

# get paths
# ---------

# initialize list with datasets
paths = []

# read datasets
try:

  # - read file
  source = h5py.File(args['<source>'], 'r')
  # - get datasets
  paths = list(HDF5pp.getdatasets(source))
  # - close file
  source.close()

except:

  print('Error reading "{0:s}"'.format(args['<source>']))


# fold
# ----

# fold based on depth
if args['--max-depth']:
  paths = [HDF5pp.abspath('/'.join(path.split('/')[:int(args['--max-depth'])+1])) for path in paths]

# remove duplicates
paths = list(set(paths))

# manually fold
if args['--fold']:
  for fold in args['--fold']:
    paths = [re.sub(r'('+HDF5pp.abspath(fold)+r')(.*)', r'\1', path) for path in paths]

# remove duplicates
paths = list(set(paths))

# print
# -----

print('\n'.join(sorted(paths)))
